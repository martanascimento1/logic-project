#include <stdio.h>
#include <stdbool.h>
#include <string.h>

#define MAX_PREMISES 100
#define MAX_LENGTH 100

typedef struct {
    char sentence[MAX_LENGTH];
    bool is_parsed;
} Sentence;

typedef struct {
    char antecedent[MAX_LENGTH];
    char consequent[MAX_LENGTH];
    bool is_parsed;
} ParsedSentence;

// Função para verificar se a conclusão é derivável a partir das premissas
bool prove_conclusion(ParsedSentence premises[], int num_premises, ParsedSentence conclusion) {
    bool derivable = false;

    // Aplica regras de inferência até que a conclusão seja alcançada ou não seja mais possível
    while (!derivable) {
        derivable = true; // Supõe que a conclusão é alcançável
        for (int i = 0; i < num_premises; i++) {
            // Verifica cada premissa
            if (!premises[i].is_parsed) {
                // Regra de Modus Ponens
                if (strcmp(premises[i].antecedent, conclusion.consequent) == 0) {
                    // Verifica se a consequência da premissa é o antecedente da conclusão
                    strcpy(premises[i].antecedent, ""); // Remove a premissa do conjunto
                    premises[i].is_parsed = true;
                }
            }
            if (!premises[i].is_parsed) {
                // Regra de Modus Tollens
                if (strcmp(premises[i].consequent, conclusion.antecedent) == 0) {
                    // Verifica se o antecedente da premissa é a negação da conclusão
                    strcpy(premises[i].consequent, ""); // Remove a premissa do conjunto
                    premises[i].is_parsed = true;
                }
            }
            // Verifica se ainda há premissas não processadas
            if (!premises[i].is_parsed) {
                derivable = false; // Ainda há premissas não processadas, a conclusão não é alcançável
            }
        }
    }

    // Verifica se todas as premissas foram processadas e a conclusão foi alcançada
    for (int i = 0; i < num_premises; i++) {
        if (!premises[i].is_parsed) {
            return false;
        }
    }
    return true;
}

int main() {
    // Sentenças de exemplo
    ParsedSentence premises[MAX_PREMISES] = {
        {"K & L & M", "I", false},
        {"I & L & J", "Q", false},
        {"C & D & E", "B", false},
        {"A & B", "Q", false},
        {"L & N & O & P", "Q", false},
        {"C & H", "R", false},
        {"R & J & M", "S", false},
        {"F & H", "B", false},
        {"G", "F", false},
        // Adicione mais premissas se necessário
    };
    int num_premises = 9; // Número de premissas fornecidas

    ParsedSentence conclusion = {"", "Q", false}; // Conclusão desejada

    // Prova a conclusão
    bool is_provable = prove_conclusion(premises, num_premises, conclusion);

    // Imprime o resultado da prova
    if (is_provable) {
        printf("A conclusão é derivável das premissas fornecidas.\n");
    } else {
        printf("A conclusão não é derivável das premissas fornecidas.\n");
    }

    return 0;
}
