def traduzir_para_logica(sentenca):
    # Substituições para as palavras-chave
    sentenca = sentenca.replace("E", "&")
    sentenca = sentenca.replace("OU", "v")
    sentenca = sentenca.replace("ENTÃO", "->")
    sentenca = sentenca.replace("É falso que", "~")

    # Imprime a sentença traduzida
    return sentenca

def modus_ponens(premissas, conclusao):
    if "P -> Q" in premissas and "P" in premissas:
        return True
    return False

def modus_tollens(premissas, conclusao):
    if "P -> Q" in premissas and "~Q" in premissas:
        return True
    return False

def silogismo_hipotetico(premissas, conclusao):
    if "A -> B" in premissas and "B -> C" in premissas:
        return True
    return False

def silogismo_disjuntivo(premissas, conclusao):
    if "P v Q" in premissas and "~P" in premissas:
        return True
    return False

def verificar_validade(premissas, conclusao):
    regras = [modus_ponens, modus_tollens, silogismo_hipotetico, silogismo_disjuntivo]

    for regra in regras:
        if regra(premissas, conclusao):
            return True
    return False

# Função para ler as sentenças do usuário
def ler_sentencas():
    print("Digite as premissas, uma por linha. Quando terminar, digite 'fim'.")
    premissas = []
    while True:
        sentenca = input().strip()
        if sentenca == 'fim':
            break
        premissas.append(sentenca)

    conclusao = input("Digite a conclusão: ").strip()
    
    return premissas, conclusao

# Leitura das sentenças do usuário
premissas, conclusao = ler_sentencas()

# Tradução das sentenças para lógica proposicional
premissas_traduzidas = [traduzir_para_logica(sentenca) for sentenca in premissas]
conclusao_traduzida = traduzir_para_logica(conclusao)

# Verificação da validade do argumento
if verificar_validade(premissas_traduzidas, conclusao_traduzida):
    print("O argumento é válido.")
else:
    print("O argumento é inválido.")
